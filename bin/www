#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webchat:server');
var http = require('http');
// const { DefaultDeserializer } = require('v8');
const pool=require('../pool')
const md5 = require('md5');
/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '5050');
app.set('port',"5050")
//app.listen(5050)

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);
// let app = http.createServer();
// //HTTP将作为参数注入到socket.io(依赖注入)
 let server = require('socket.io')(http.createServer());
 var visitorLists={};
 var defaultRoom={};
 var publicRooms=[];
 var dRoomInfo={};//这个变量是默认房间的用户Id
 var pRoomInfo=[];
 var offMessage={};
//  console.length(offMssage)
 //启动服务器监听
server.listen(5050);
//服务器监听连接的客户端
server.on('connection',(client)=>{
  //监听用户登录
  client.on('login',data=>{
    // console.log('登录用户名'+data.userName+'登录密码'+data.password)
      let username=data.userName;
      let password=md5(data.password)
      let sql='SELECT id,nickname,avatar FROM user WHERE user_name=? AND password=?';
      pool.query(sql,[username,password],(err,results)=>{
          if(err) throw err;
          if(results.length==1){//账号存在 登录成功
            //在线列表用用户id作为索引。
            console.log('登录成功')
            console.log('用户Id是'+results[0].id);
            delete visitorLists[client.id];
            //把在线列表替换为id索引.
            visitorLists[results[0].id]=client;
            //查询离线消息
            console.log('离线消息打印：');
            console.log(offMessage[results[0].id])
            let offlineMessage=offMessage[results[0].id] || {friendRequest:{},message:{}};
            //查询好友
            sql=`select id,avatar,nickname,user_name from user where id in (select friends_id from friends where user_id = ? union all select user_id from friends where friends_id = ? )`;
            pool.query(sql,[results[0].id,results[0].id],(err,result_all)=>{
              if (err) throw err;
              console.log(results[0])
              // console.log(...results[0])
              let res={
                id:results[0].id,
                nickname:results[0].nickname,
                avatar:results[0].avatar,
                friends:result_all,
                offlineMessage
              };
              client.emit('logResult',{code:1,type:data.type,result:res});
            })
          }else{
              console.log('登录失败')
              client.emit('logResult',{code:0,type:data.type});
          } 
      });
  });

  //向用户发送唯一id作为标识，这个下标就是当前的clinet的唯一id。
  client.emit("sendIndex",client.id);
  //然后把client对象加入到这个数组中
  visitorLists[client.id]=client;
  //console.log(visitorLists[client.id])
  console.log('登录一位用户,客户端id是'+client.id);

  //向用户广播每个房间的信息
  client.emit("sendRoomInfo",[dRoomInfo,pRoomInfo]);
  //监听用户加入房间
  client.on('joinRoom',data=>{
    if(data.roomId=="default"){
        console.log('用户加入了默认公共聊天室');
        //发送用户的位置下标 用对象属性做这个下标
        let roomIndex=Object.keys(defaultRoom).length;
        client.emit("joinedRoom",roomIndex);
        defaultRoom[roomIndex]=client;
        dRoomInfo[roomIndex]={
          id: client.id,
          nickname: data.nickname,
          userId: data.userId
        };
        console.log("默认聊天室的长度是"+Object.keys(defaultRoom).length)
    }
    else {
      console.log('用户加入了公共聊天室: '+data+'号房')
      let pRoomIndex=Object.keys(publicRooms[data.roomId].people).length;
      client.emit("joinedRoom",pRoomIndex);
      publicRooms[data.roomId].people[pRoomIndex]=client;
      pRoomInfo[data.roomId].people[pRoomIndex]={
        id: client.id,
        nickname: data.nickname,
        userId: data.userId
      };
      console.log('现在公共聊天室: '+data.roomId+"号房的长度是"+Object.keys(publicRooms[data.roomId].people).length)
    }
    //登录的用户发送昵称 和id没登录的用户发送id代做昵称(游客)。
    server.emit('peopleChange',{
      type:'join',
      room:data.roomId,
      id:client.id,
      nickname:data.nickname,
      userId:data.userId})
  })

  //监听用户退出房间
  client.on('exitRoom',(data)=>{
    console.log('有一位用户退出了房间')
    if(data.roomId=="default"){
      delete defaultRoom[data.roomIndex];
      delete dRoomInfo[data.roomIndex];
      console.log("现在默认聊天室的长度是"+Object.keys(defaultRoom).length)
    }
    else {
      delete publicRooms[data.roomId].people[data.roomIndex];
      delete pRoomInfo[data.roomId].people[data.roomIndex];
      console.log('现在公共聊天室: '+data.roomId+"号房的长度是"+publicRooms[data.roomId].people.length)
    }
     //向所有人广播 有人退出了房间 并且发送房间信息和退出用户所在的房间下标
    server.emit('peopleChange',{type:'out',room:data.roomId,index:data.roomIndex})
  })

  //监听用户发送群聊消息
  client.on('sendMsg',data=>{
    console.log("收到客户端发送群聊消息")
    if(data.roomId==="default"){
      for(var ele in defaultRoom){
        defaultRoom[ele].emit("backMsg",{content:data.content,index:data.index})
      }
    }
    else {
      for(var ele in publicRooms[data.roomId].people){
        publicRooms[data.roomId].people[ele].emit("backMsg",{content:data.content,index:data.index})
      }
    }
  });

  //监听个人聊天
  client.on('sendPrivateMsg',data=>{
    console.log('收到私人聊天消息')
    visitorLists[data.id].emit('privateBack',{content:data.content,index:data.index});
    client.emit('privateBack',{content:data.content,index:data.index})
  })

  //监听用户创建公共聊天室
  client.on('addPublicRoom',data=>{
    console.log('创建的房间名字是: '+data);
    publicRooms.push({roomName:data,people:{}});
    pRoomInfo.push({roomName:data,people:{}});
    // 向所有人广播 并发送创建者index和房间名字
    server.emit('othersAddedRoom',{roomName:data,index:client.id});
  }) 

//监听用户注册
client.on('reg',data=>{
  let username=data.userName;
  let password=data.password;
  let nickname=data.nickname;
  let sql='SELECT id FROM user WHERE user_name=?';
  pool.query(sql,[username],(err,results)=>{
      if(err) throw err;
      if(results.length==0){
          sql='INSERT user(user_name,password,nickname) VALUES(?,MD5(?),?)';
          pool.query(sql,[username,password,nickname],(err,results)=>{
              if(err) throw err;
              if(results.affectedRows>0){
                console.log('注册成功')
                client.emit('regResult',1)
              };
          });
      }else if(results.length>0){
          console.log('用户名已存在')
          client.emit('regResult',0)
      }
  });
});

//监听用户添加好友
client.on('addFriend',data=>{
  //只能根据用户名添加
  let sql=`select id,nickname from user where user_name = ?`;
  pool.query(sql,[data.friendName],(err,result)=>{
    if(err) throw err;
    if(result.length===0){
      //用户不存在
      console.log('用户不存在')
      client.emit('addFriendResult',0)
    }
    else {
      client.emit('addFriendResult',1)
      //如果用户在线
      if(visitorLists[result[0].id]){
        console.log('用户在线');
        //向用户发送消息
        visitorLists[result[0].id].emit('friendRequest',{
          friendName:data.userName,
          nickname:data.nickname,
          info:data.helloMessage,
          friendId:data.userId
        })
      }
        if(!offMessage[result[0].id]){
          //这个用户的离线消息列表初始化 这个用户一上线将自动收到这个消息
            offMessage[result[0].id]={friendRequest:{},message:{}};
        }
          offMessage[result[0].id].friendRequest[data.userId]={
            friendName:data.userName,
            nickname:data.nickname,
            info:data.helloMessage,
            friendId:data.userId
          }
      }
  })
})
client.on('agreeFriendRequest',data=>{//同意或者拒绝之后都应该向对方发送消息。
  let sql='insert friends value (null,?,?)';
  pool.query(sql,[data[0],data[1]],(err,result)=>{
    if (err) throw err;
    if (result.affectedRows>0){
      console.log('添加好友成功')
      //删除这条好友请求记录
      delete offMessage[data[2].userId].friendRequest[data[2].friendId];
      client.emit('agreeFriendResult',1);
      //向好友申请人发送反馈消息 需要考虑用户是否在线 
      //用户在线情况
      visitorLists[data[2].friendId].emit('addFriendBack',{
        avatar:data[2].avatar,
        id:data[2].userId,
        nickname:data[2].nickname,
        user_name:data[2].userName,
      })
    }
    else if(result.affectedRows===0) client.emit('agreeFriendResult',0)
  })
})

//监听用户删除好友
client.on('deleteFriend',data=>{
  let {userId,friendId}=data;
  let sql='delete from friends where user_id in(?,?) and friends_id in(?,?)';
  pool.query(sql,[userId,friendId,userId,friendId],(err,res)=>{
    if (err) throw err;
    if(res.affectedRows===1){
      console.log('删除成功')
      client.emit('deleteFriendRes',1)
    }
    else client.emit('deleteFriendRes',0)
  })
})

//清除房间
client.on('clearRoom',data=>{
   defaultRoom={};
   publicRooms=[];
   dRoomInfo={};
   pRoomInfo=[];
})
  //断开连接 服务端自动发送的事件
  client.on("off",(data)=>{
    console.log("有用户断开连接")
    if(data.roomId=="default"){
      console.log("断开连接用户的房间号"+"  "+data.roomId)
      delete defaultRoom[data.roomIndex];
      delete dRoomInfo[data.roomIndex];
      console.log("当前公共房间长度"+" "+defaultRoom.length)
    }
    else if(data.roomId=="no"){
      console.log("没有房间号")
      delete visitorLists[client.id]
    }
   else{
     console.log("房间号是其他")
   }
  })
});


